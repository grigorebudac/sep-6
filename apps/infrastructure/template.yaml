AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sep6 infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  OAuthCallbackUrl:
    Type: String
    Default: "http://localhost:3000/"
  OAuthLogoutUrl:
    Type: String
    Default: "http://localhost:3000/"
  UserPoolDomainName:
    Type: String
    Default: ""
  FacebookClientId:
    Type: String
    Default: ""
  FacebookClientSecret:
    Type: String
    Default: ""
  GoogleClientId:
    Type: String
    Default: ""
  GoogleClientSecret:
    Type: String
    Default: ""
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs14.x
    Handler: index.handler
    Environment:
      Variables:
        USERS_TABLE: "Users"
        REVIEWS_TABLE: "Reviews"
        WATCHLISTS_TABLE: "Watchlists"

Resources:
  # API
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: api
      StageName: v1
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: user_pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
        - Name: picture
          AttributeDataType: String
          Mutable: true
      LambdaConfig:
        CustomMessage: !GetAtt customMessageTriggerFunction.Arn
        PostConfirmation: !GetAtt postConfirmationTriggerFunction.Arn
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub user_pool_client
      GenerateSecret: false
      RefreshTokenValidity: 365
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthScopes:
        - "email"
        - "openid"
        - "profile"
        - "aws.cognito.signin.user.admin"
      AllowedOAuthFlows:
        - "implicit"
        - "code"
      SupportedIdentityProviders:
        - Facebook
        - Google
      CallbackURLs:
        - !Sub ${OAuthCallbackUrl}
      LogoutURLs:
        - !Sub ${OAuthLogoutUrl}
  # Identity Pool
  UserIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub user_identity_pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  # User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${UserPoolDomainName}
      UserPoolId: !Ref UserPool
  # Facebook
  FacebookUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Facebook
      ProviderType: Facebook
      AttributeMapping:
        email: "email"
        name: "name"
      ProviderDetails:
        client_id: !Sub ${FacebookClientId}
        client_secret: !Sub ${FacebookClientSecret}
        authorize_scopes: "public_profile,email"
  # Google
  GoogleUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      AttributeMapping:
        email: "email"
        name: "name"
      ProviderDetails:
        client_id: !Sub ${GoogleClientId}
        client_secret: !Sub ${GoogleClientSecret}
        authorize_scopes: "email"
  # Roles
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref UserIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: "*"
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref UserIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                  - "mobiletargeting:UpdateEndpoint"
                  - "mobiletargeting:PutEvents"
                  - "lambda:InvokeFunction"
                Resource: "*"
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref UserIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
  # Invocations
  CustomMessageInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt customMessageTriggerFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt postConfirmationTriggerFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  # Triggers
  customMessageTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub customMessageTrigger
      CodeUri: triggers/customMessage
      Environment:
        Variables:
          STAGE: !Sub ${Environment}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  postConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub postConfirmationTrigger
      CodeUri: triggers/postConfirmation
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTable
        - DynamoDBWritePolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # User
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getUser
      CodeUri: modules/user/getUser
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # Movie
  getMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getMovies
      CodeUri: modules/movie/getMovies
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /movies
            Method: GET
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # Review
  getReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getReviews
      CodeUri: modules/review/getReviews
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /reviews
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ReviewsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  createReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createReview
      CodeUri: modules/review/createReview
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /reviews
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ReviewsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  deleteReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteReview
      CodeUri: modules/review/deleteReview
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /reviews/{id}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  getWatchlistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getWatchlists
      CodeUri: modules/watchlist/getWatchlists
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists
            Method: GET
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  createWatchlistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createWatchlist
      CodeUri: modules/watchlist/createWatchlist
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  updateWatchlistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateWatchlist
      CodeUri: modules/watchlist/updateWatchlist
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists/{watchListId}
            Method: PATCH
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  deleteWatchlistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteWatchlist
      CodeUri: modules/watchlist/deleteWatchlist
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists/{watchListId}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  deleteMovieFromWatchlistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteMovieFromWatchlist
      CodeUri: modules/watchlist/deleteMovieFromWatchlist
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists/{watchListId}/movies/{movieId}
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  addMovieToWatchlistFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: addMovieToWatchlist
      CodeUri: modules/watchlist/addMovieToWatchlist
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /watchlists/{watchListId}/movies
            Method: PUT
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WatchlistTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # DynamoDB
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Users"
      PrimaryKey:
        Name: "id"
        Type: "String"
  ReviewsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Reviews"
      PrimaryKey:
        Name: "id"
        Type: "String"
  WatchlistTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Watchlists"
      PrimaryKey:
        Name: "id"
        Type: "String"
Outputs:
  API:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/v1"
