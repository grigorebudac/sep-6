AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sep6 infrastructure

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs14.x
    Handler: index.handler
    Environment:
      Variables:
        USERS_TABLE: "Users"
        REVIEWS_TABLE: "Reviews"

Resources:
  # API
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: api
      StageName: v1
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: user_pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameConfiguration:
        CaseSensitive: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
        - Name: picture
          AttributeDataType: String
          Mutable: true
      LambdaConfig:
        CustomMessage: !GetAtt customMessageTriggerFunction.Arn
        PostConfirmation: !GetAtt postConfirmationTriggerFunction.Arn
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub user_pool_client
      GenerateSecret: false
      RefreshTokenValidity: 30
  # Invocations
  CustomMessageInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt customMessageTriggerFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt postConfirmationTriggerFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  # Triggers
  customMessageTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub customMessageTrigger
      CodeUri: triggers/customMessage
      Environment:
        Variables:
          STAGE: !Sub ${Environment}
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  postConfirmationTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub postConfirmationTrigger
      CodeUri: triggers/postConfirmation
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # User
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getUser
      CodeUri: modules/user/getUser
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # Movie
  getMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getMovies
      CodeUri: modules/movie/getMovies
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /movies
            Method: GET
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # Review
  getReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getReviews
      CodeUri: modules/review/getReviews
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /reviews
            Method: GET
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  createReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createReview
      CodeUri: modules/review/createReview
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /review
            Method: POST
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref ReviewsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  deleteReviewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteReview
      CodeUri: modules/review/deleteReview
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /review
            Method: DELETE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReviewsTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
  # DynamoDB
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Users"
      PrimaryKey:
        Name: "id"
        Type: "String"
  ReviewsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: "Reviews"
      PrimaryKey:
        Name: "id"
        Type: "String"
Outputs:
  API:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/v1"
